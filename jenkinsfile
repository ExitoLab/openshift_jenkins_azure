pipeline {
    agent any

    environment {
        IMAGE_NAME = 'talk2toks/testng-automation:v1.16'
        PVC_NAME = 'test-results-pvc'
        SUITES = 'regression,regression-chrome,small-edge'
        NAMESPACE = 'jenkins-agents'
        OPENSHIFT_URL = 'https://api.qpsf7263.centralus.aroapp.io:6443'
        GIT_REPO = 'https://github.com/ExitoLab/openshift_jenkins_azure.git'
        GIT_BRANCH = 'main'
    }

    stages {
        stage('Run Maven Test Jobs in OpenShift') {
            steps {
                script {
                    def timestamp = new Date().format("yyyyMMddHHmmss")
                    def suiteList = env.SUITES.split(',')
                    def jobNames = []

                    for (suite in suiteList) {
                        def suiteName = suite.trim()
                        def jobName = "maven-test-${suiteName}-${timestamp}"
                        jobNames << jobName

                        def jobYaml = """
apiVersion: batch/v1
kind: Job
metadata:
  name: ${jobName}
  namespace: ${env.NAMESPACE}
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
      serviceAccountName: jenkins-agent
      initContainers:
      - name: volume-permission-fix
        image: busybox
        command: ["sh", "-c", "chmod -R 777 /mnt/results"]
        volumeMounts:
        - name: results
          mountPath: /mnt/results
      containers:
      - name: maven-test
        image: ${env.IMAGE_NAME}
        command:
          - /bin/sh
          - -c
          - |
             git clone --branch ${env.GIT_BRANCH} ${env.GIT_REPO} repo && \
                cd repo/testng-automation && \
                mkdir -p /mnt/results/${suiteName} && \
                mvn test \
                  -DsuiteXmlFile=testng-${suiteName}.xml \
                  -Dsurefire.reportsDirectory=/mnt/results/${suiteName}
        imagePullSecrets:
          - name: regcred
        volumeMounts:
        - name: results
          mountPath: /mnt/results
      restartPolicy: Never
      volumes:
      - name: results
        persistentVolumeClaim:
          claimName: ${env.PVC_NAME}
"""

                        writeFile file: "oc-job-${suiteName}.yaml", text: jobYaml
                        sh "oc apply -f oc-job-${suiteName}.yaml -n ${env.NAMESPACE}"
                    }

                    def waitStages = [:]
                    for (jobName in jobNames) {
                        def jn = jobName
                        waitStages[jn] = {
                            sh "oc wait --for=condition=complete --timeout=300s job/${jn} -n ${env.NAMESPACE}"
                        }
                    }
                    parallel waitStages
                }
            }
        }
    }
}
